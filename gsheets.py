import streamlit as st
import pandas as pd

# Configuraci√≥n inicial de Streamlit
st.set_page_config(
    page_title="Buscador de C√≥digos",
    page_icon="üîç",
    layout="centered",
    initial_sidebar_state="expanded"
)

# URL del archivo de Google Sheets
gsheetid = '16iIKA3O-7RyyMyN-uQuGy1vpA9eQ1KkReeq97ISy_Jw'
sheetid = '0'
url = f'https://docs.google.com/spreadsheets/d/{gsheetid}/export?format=csv&gid={sheetid}'

@st.cache_data
def load_data(url):
    return pd.read_csv(url)

# Cargar datos
dfDatos = load_data(url)

# Funci√≥n para generar URL de c√≥digo de barras
def generar_codigo_barras_url(codigo):
    return f"https://bwipjs-api.metafloor.com/?bcid=code128&text={codigo}&scale=3&includetext"

st.title("Buscador de :blue[C√≥digos]")

# Mostrar t√≠tulo de la tercera columna
if dfDatos.shape[1] >= 3:
    tercera_columna = dfDatos.columns[2]
    st.info(f"Maestro de Origen: _*:red[{tercera_columna}]*_")
else:
    st.warning("El DataFrame tiene menos de 3 columnas.")

# Campo de entrada para buscar por descripci√≥n
search_term = st.text_input("Ingrese Descripci√≥n de Art√≠culo:")

if search_term:
    # Filtrar resultados
    filtered_df = dfDatos[dfDatos["Descripci√≥n"].str.contains(search_term, case=False, na=False)]

    if not filtered_df.empty:
        st.write("C√≥digos encontrados:")
        filtered_df["Codigo"] = filtered_df["Codigo"].apply(
            lambda x: int(float(x)) if isinstance(x, (float, str)) and x.isnumeric() else x
        )
        st.dataframe(filtered_df[["Codigo", "Descripci√≥n"]].reset_index(drop=True))

        # Mostrar c√≥digo de barras para cada resultado
        for codigo in filtered_df["Codigo"]:
            st.write(f"C√≥digo de barras para: {codigo}")
            barcode_url = generar_codigo_barras_url(str(codigo))
            st.image(barcode_url, caption=f"C√≥digo: {codigo}")
    else:
        st.write("No se encontraron resultados.")
else:
    st.write("Introduce un t√©rmino para buscar.")

st.divider()

# Campo de entrada para buscar por c√≥digo
search_term2 = st.text_input("Ingrese C√≥digo del Art√≠culo:")

if search_term2:
    filtered_df = dfDatos[dfDatos["Codigo"].astype(str).str.contains(search_term2, case=False, na=False)]

    if not filtered_df.empty:
        st.write("C√≥digos encontrados:")
        filtered_df["Codigo"] = filtered_df["Codigo"].apply(
            lambda x: int(float(x)) if isinstance(x, (float, str)) and x.isnumeric() else x
        )
        st.dataframe(filtered_df[["Codigo", "Descripci√≥n"]].reset_index(drop=True))

        for codigo in filtered_df["Codigo"]:
            st.write(f"C√≥digo de barras para: {codigo}")
            barcode_url = generar_codigo_barras_url(str(codigo))
            st.image(barcode_url, caption=f"C√≥digo: {codigo}")
    else:
        st.write("No se encontraron resultados.")
else:
    st.write("Introduce un t√©rmino para buscar.")

st.divider()

# Footer
footer_html = """<div style='text-align: center;'>
  <p>Creado por Alfredo Rubilar. üßëüèª‚Äçüíª</p>
</div>"""
st.markdown(footer_html, unsafe_allow_html=True)
